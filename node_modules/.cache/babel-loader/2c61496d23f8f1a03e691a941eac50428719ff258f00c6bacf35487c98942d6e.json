{"ast":null,"code":"class CalculatorService {\n  constructor(inputs) {\n    this.inputs = inputs;\n    this.results = {\n      currentState: {\n        timeTheftLoss: 0,\n        overtimeLoss: 0,\n        overSchedulingLoss: 0,\n        productivityLoss: 0,\n        turnoverLoss: 0,\n        callOutLoss: 0,\n        totalAnnualLoss: 0\n      },\n      futureState: {\n        timeTheftSavings: 0,\n        overtimeSavings: 0,\n        overSchedulingSavings: 0,\n        productivitySavings: 0,\n        turnoverSavings: 0,\n        callOutSavings: 0,\n        totalAnnualSavings: 0\n      },\n      complianceRisk: {\n        mealRestViolations: 0,\n        fairWorkweekViolations: 0,\n        totalComplianceRisk: 0\n      }\n    };\n  }\n  async calculateAll() {\n    // Individual calculations will be added here\n    await this.calculateTimeTheft();\n    await this.calculateOvertime();\n    await this.calculateOverScheduling();\n    await this.calculateProductivity();\n    await this.calculateTurnover();\n    await this.calculateCallOuts();\n    await this.calculateMealRestCompliance();\n    await this.calculateFairWorkweekCompliance();\n\n    // Calculate totals\n    this.calculateTotals();\n    return this.results;\n  }\n  calculateTotals() {\n    // Current state total\n    this.results.currentState.totalAnnualLoss = this.results.currentState.timeTheftLoss + this.results.currentState.overtimeLoss + this.results.currentState.overSchedulingLoss + this.results.currentState.productivityLoss + this.results.currentState.turnoverLoss + this.results.currentState.callOutLoss;\n\n    // Future state total\n    this.results.futureState.totalAnnualSavings = this.results.futureState.timeTheftSavings + this.results.futureState.overtimeSavings + this.results.futureState.overSchedulingSavings + this.results.futureState.productivitySavings + this.results.futureState.turnoverSavings + this.results.futureState.callOutSavings;\n\n    // Compliance risk total\n    this.results.complianceRisk.totalComplianceRisk = this.results.complianceRisk.mealRestViolations + this.results.complianceRisk.fairWorkweekViolations;\n  }\n  validateInputs(requiredInputs) {\n    return requiredInputs.every(input => this.inputs.hasOwnProperty(input) && this.inputs[input] !== null && this.inputs[input] !== undefined && this.inputs[input] !== '');\n  }\n  async calculateTimeTheft() {\n    const requiredInputs = ['averageWage', 'timeTheftMinutes', 'daysOpenPerWeek', 'numberOfEmployees', 'timeTheftImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.timeTheftLoss = 0;\n      this.results.futureState.timeTheftSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const timeTheftMinutes = parseFloat(this.inputs.timeTheftMinutes) || 0;\n    const daysOpenPerWeek = parseFloat(this.inputs.daysOpenPerWeek) || 0;\n    const numberOfEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const timeTheftImprovement = parseFloat(this.inputs.timeTheftImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened labor cost (Average wage × 1.3)\n    const fullyBurdenedRate = averageWage * 1.3;\n\n    // 2. Calculate cost per minute (Fully-burdened rate ÷ 60)\n    const costPerMinute = fullyBurdenedRate / 60;\n\n    // 3. Calculate annual time theft (Minutes per day × Days per week × 52 weeks × Number of employees)\n    const annualTimeTheftMinutes = timeTheftMinutes * daysOpenPerWeek * 52 * numberOfEmployees;\n\n    // 4. Calculate annual cost (Total minutes × Cost per minute)\n    const annualCost = annualTimeTheftMinutes * costPerMinute;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * timeTheftImprovement;\n\n    // Store results\n    this.results.currentState.timeTheftLoss = annualCost;\n    this.results.futureState.timeTheftSavings = savings;\n  }\n  async calculateOvertime() {\n    const requiredInputs = ['annualPayroll', 'overtimePercentage', 'overtimeImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overtimeLoss = 0;\n      this.results.futureState.overtimeSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualPayroll = parseFloat(this.inputs.annualPayroll) || 0;\n    const overtimePercentage = parseFloat(this.inputs.overtimePercentage) / 100 || 0;\n    const overtimeImprovement = parseFloat(this.inputs.overtimeImprovement) / 100 || 0;\n\n    // 1. Calculate base overtime cost (Annual payroll × Overtime percentage)\n    const annualCost = annualPayroll * overtimePercentage;\n\n    // 2. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overtimeImprovement;\n\n    // Store results\n    this.results.currentState.overtimeLoss = annualCost;\n    this.results.futureState.overtimeSavings = savings;\n  }\n  async calculateOverScheduling() {\n    const requiredInputs = ['actualHours', 'budgetedHours', 'numberOfLocations', 'averageWage', 'overSchedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overSchedulingLoss = 0;\n      this.results.futureState.overSchedulingSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const actualHours = parseFloat(this.inputs.actualHours) || 0;\n    const budgetedHours = parseFloat(this.inputs.budgetedHours) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const overSchedulingImprovement = parseFloat(this.inputs.overSchedulingImprovement) / 100 || 0;\n\n    // 1. Calculate weekly excess hours per location (Actual hours - Budgeted hours per week)\n    const weeklyExcessHoursPerLocation = Math.max(0, actualHours - budgetedHours);\n\n    // 2. Calculate total weekly excess hours (Weekly excess hours × Number of locations)\n    const totalWeeklyExcessHours = weeklyExcessHoursPerLocation * numberOfLocations;\n\n    // 3. Calculate weekly cost (Total weekly excess hours × Average wage)\n    const weeklyCost = totalWeeklyExcessHours * averageWage;\n\n    // 4. Calculate annual cost (Weekly cost × 52 weeks)\n    const annualCost = weeklyCost * 52;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overSchedulingImprovement;\n\n    // Store results\n    this.results.currentState.overSchedulingLoss = annualCost;\n    this.results.futureState.overSchedulingSavings = savings;\n  }\n  async calculateProductivity() {\n    const requiredInputs = ['annualSalary', 'hoursPerLocation', 'numberOfLocations', 'schedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.productivityLoss = 0;\n      this.results.futureState.productivitySavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualSalary = parseFloat(this.inputs.annualSalary) || 0;\n    const hoursPerLocation = parseFloat(this.inputs.hoursPerLocation) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const productivityImprovement = parseFloat(this.inputs.schedulingImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened hourly rate (Annual salary × 1.3 ÷ 2080)\n    const fullyBurdenedHourlyRate = annualSalary * 1.3 / 2080;\n\n    // 2. Calculate total weekly hours (Hours per location × Number of locations)\n    const totalWeeklyHours = hoursPerLocation * numberOfLocations;\n\n    // 3. Calculate annual cost (Total weekly hours × Hourly rate × 52 weeks)\n    const annualCost = totalWeeklyHours * fullyBurdenedHourlyRate * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * productivityImprovement;\n\n    // Store results\n    this.results.currentState.productivityLoss = annualCost;\n    this.results.futureState.productivitySavings = savings;\n  }\n  async calculateTurnover() {\n    const requiredInputs = ['numberOfEmployees', 'turnoverRate', 'turnoverImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.turnoverLoss = 0;\n      this.results.futureState.turnoverSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const turnoverRate = parseFloat(this.inputs.turnoverRate) / 100 || 0;\n    const turnoverImprovement = parseFloat(this.inputs.turnoverImprovement) / 100 || 0;\n    const costPerReplacement = 4700; // Fixed cost based on industry research\n\n    // 1. Calculate quarterly employee turnover (Total employees × Turnover rate)\n    const quarterlyTurnover = totalEmployees * turnoverRate;\n\n    // 2. Calculate annual turnover (Quarterly turnover × 4)\n    const annualTurnover = quarterlyTurnover * 4;\n\n    // 3. Calculate replacement cost (Annual turnover × Cost per replacement)\n    const annualCost = annualTurnover * costPerReplacement;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * turnoverImprovement;\n\n    // Store results\n    this.results.currentState.turnoverLoss = annualCost;\n    this.results.futureState.turnoverSavings = savings;\n  }\n  async calculateCallOuts() {\n    const requiredInputs = ['revenuePerHour', 'shiftDuration', 'calloutsPerWeek', 'numberOfLocations', 'calloutImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.callOutLoss = 0;\n      this.results.futureState.callOutSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const revenuePerHour = parseFloat(this.inputs.revenuePerHour) || 0;\n    const shiftDuration = parseFloat(this.inputs.shiftDuration) || 0;\n    const calloutsPerWeek = parseFloat(this.inputs.calloutsPerWeek) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const calloutImprovement = parseFloat(this.inputs.calloutImprovement) / 100 || 0;\n\n    // 1. Calculate revenue loss per shift (Revenue per hour × Shift duration)\n    const revenueLossPerShift = revenuePerHour * shiftDuration;\n\n    // 2. Calculate weekly loss per location (Revenue loss per shift × Call-outs per week)\n    const weeklyLossPerLocation = revenueLossPerShift * calloutsPerWeek;\n\n    // 3. Calculate annual loss (Weekly loss × Number of locations × 52 weeks)\n    const annualCost = weeklyLossPerLocation * numberOfLocations * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * calloutImprovement;\n\n    // Store results\n    this.results.currentState.callOutLoss = annualCost;\n    this.results.futureState.callOutSavings = savings;\n  }\n  async calculateMealRestCompliance() {\n    const requiredInputs = ['averageWage', 'numberOfEmployees'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.mealRestViolations = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const AFFECTED_EMPLOYEE_PERCENTAGE = 0.48; // 48% based on research\n\n    // 1. Calculate penalty per violation (Average wage × 2)\n    const penaltyPerViolation = averageWage * 2;\n\n    // 2. Calculate affected employees (Total employees × 48%)\n    const affectedEmployees = totalEmployees * AFFECTED_EMPLOYEE_PERCENTAGE;\n\n    // 3. Calculate annual risk (Penalty × Affected employees × 52 weeks)\n    const annualRisk = penaltyPerViolation * affectedEmployees * 52;\n\n    // Store results\n    this.results.complianceRisk.mealRestViolations = annualRisk;\n  }\n  async calculateFairWorkweekCompliance() {\n    // Required inputs based on the calculation steps\n    const requiredInputs = ['averageEmployeesPerLocation',\n    // Average employees per location\n    'fairWorkweekLocations',\n    // Number of FWW locations\n    'daysOpenPerWeek' // Days open per week\n    ];\n\n    // Validate required inputs\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.fairWorkweekViolations = 0;\n      return;\n    }\n\n    // Step 1: Calculate total affected employees\n    // (Average employees per location × Number of FWW locations)\n    const totalAffectedEmployees = parseFloat(this.inputs.averageEmployeesPerLocation) * parseFloat(this.inputs.fairWorkweekLocations);\n\n    // Step 2: Calculate annual days\n    // (Days open per week × 52 weeks)\n    const annualDays = parseFloat(this.inputs.daysOpenPerWeek) * 52;\n\n    // Step 3: Calculate low-end annual risk\n    // (Total employees × Annual days × $300)\n    const PENALTY_AMOUNT = 300;\n    const annualRisk = totalAffectedEmployees * annualDays * PENALTY_AMOUNT;\n\n    // Store the result\n    this.results.complianceRisk.fairWorkweekViolations = annualRisk;\n  }\n\n  // ... other calculation methods\n}\nexport default CalculatorService;","map":{"version":3,"names":["CalculatorService","constructor","inputs","results","currentState","timeTheftLoss","overtimeLoss","overSchedulingLoss","productivityLoss","turnoverLoss","callOutLoss","totalAnnualLoss","futureState","timeTheftSavings","overtimeSavings","overSchedulingSavings","productivitySavings","turnoverSavings","callOutSavings","totalAnnualSavings","complianceRisk","mealRestViolations","fairWorkweekViolations","totalComplianceRisk","calculateAll","calculateTimeTheft","calculateOvertime","calculateOverScheduling","calculateProductivity","calculateTurnover","calculateCallOuts","calculateMealRestCompliance","calculateFairWorkweekCompliance","calculateTotals","validateInputs","requiredInputs","every","input","hasOwnProperty","undefined","averageWage","parseFloat","timeTheftMinutes","daysOpenPerWeek","numberOfEmployees","timeTheftImprovement","fullyBurdenedRate","costPerMinute","annualTimeTheftMinutes","annualCost","savings","annualPayroll","overtimePercentage","overtimeImprovement","actualHours","budgetedHours","numberOfLocations","overSchedulingImprovement","weeklyExcessHoursPerLocation","Math","max","totalWeeklyExcessHours","weeklyCost","annualSalary","hoursPerLocation","productivityImprovement","schedulingImprovement","fullyBurdenedHourlyRate","totalWeeklyHours","totalEmployees","turnoverRate","turnoverImprovement","costPerReplacement","quarterlyTurnover","annualTurnover","revenuePerHour","shiftDuration","calloutsPerWeek","calloutImprovement","revenueLossPerShift","weeklyLossPerLocation","AFFECTED_EMPLOYEE_PERCENTAGE","penaltyPerViolation","affectedEmployees","annualRisk","totalAffectedEmployees","averageEmployeesPerLocation","fairWorkweekLocations","annualDays","PENALTY_AMOUNT"],"sources":["/Users/joshuathomas/Desktop/Code/depulator final/src/services/calculatorService.js"],"sourcesContent":["class CalculatorService {\n  constructor(inputs) {\n    this.inputs = inputs;\n    this.results = {\n      currentState: {\n        timeTheftLoss: 0,\n        overtimeLoss: 0,\n        overSchedulingLoss: 0,\n        productivityLoss: 0,\n        turnoverLoss: 0,\n        callOutLoss: 0,\n        totalAnnualLoss: 0,\n      },\n      futureState: {\n        timeTheftSavings: 0,\n        overtimeSavings: 0,\n        overSchedulingSavings: 0,\n        productivitySavings: 0,\n        turnoverSavings: 0,\n        callOutSavings: 0,\n        totalAnnualSavings: 0,\n      },\n      complianceRisk: {\n        mealRestViolations: 0,\n        fairWorkweekViolations: 0,\n        totalComplianceRisk: 0,\n      }\n    };\n  }\n\n  async calculateAll() {\n    // Individual calculations will be added here\n    await this.calculateTimeTheft();\n    await this.calculateOvertime();\n    await this.calculateOverScheduling();\n    await this.calculateProductivity();\n    await this.calculateTurnover();\n    await this.calculateCallOuts();\n    await this.calculateMealRestCompliance();\n    await this.calculateFairWorkweekCompliance();\n    \n    // Calculate totals\n    this.calculateTotals();\n    \n    return this.results;\n  }\n\n  calculateTotals() {\n    // Current state total\n    this.results.currentState.totalAnnualLoss = \n      this.results.currentState.timeTheftLoss +\n      this.results.currentState.overtimeLoss +\n      this.results.currentState.overSchedulingLoss +\n      this.results.currentState.productivityLoss +\n      this.results.currentState.turnoverLoss +\n      this.results.currentState.callOutLoss;\n\n    // Future state total\n    this.results.futureState.totalAnnualSavings = \n      this.results.futureState.timeTheftSavings +\n      this.results.futureState.overtimeSavings +\n      this.results.futureState.overSchedulingSavings +\n      this.results.futureState.productivitySavings +\n      this.results.futureState.turnoverSavings +\n      this.results.futureState.callOutSavings;\n\n    // Compliance risk total\n    this.results.complianceRisk.totalComplianceRisk =\n      this.results.complianceRisk.mealRestViolations +\n      this.results.complianceRisk.fairWorkweekViolations;\n  }\n\n  validateInputs(requiredInputs) {\n    return requiredInputs.every(input => \n      this.inputs.hasOwnProperty(input) && \n      this.inputs[input] !== null && \n      this.inputs[input] !== undefined && \n      this.inputs[input] !== ''\n    );\n  }\n\n  async calculateTimeTheft() {\n    const requiredInputs = ['averageWage', 'timeTheftMinutes', 'daysOpenPerWeek', 'numberOfEmployees', 'timeTheftImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.timeTheftLoss = 0;\n      this.results.futureState.timeTheftSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const timeTheftMinutes = parseFloat(this.inputs.timeTheftMinutes) || 0;\n    const daysOpenPerWeek = parseFloat(this.inputs.daysOpenPerWeek) || 0;\n    const numberOfEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const timeTheftImprovement = parseFloat(this.inputs.timeTheftImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened labor cost (Average wage × 1.3)\n    const fullyBurdenedRate = averageWage * 1.3;\n\n    // 2. Calculate cost per minute (Fully-burdened rate ÷ 60)\n    const costPerMinute = fullyBurdenedRate / 60;\n\n    // 3. Calculate annual time theft (Minutes per day × Days per week × 52 weeks × Number of employees)\n    const annualTimeTheftMinutes = timeTheftMinutes * daysOpenPerWeek * 52 * numberOfEmployees;\n\n    // 4. Calculate annual cost (Total minutes × Cost per minute)\n    const annualCost = annualTimeTheftMinutes * costPerMinute;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * timeTheftImprovement;\n\n    // Store results\n    this.results.currentState.timeTheftLoss = annualCost;\n    this.results.futureState.timeTheftSavings = savings;\n  }\n\n  async calculateOvertime() {\n    const requiredInputs = ['annualPayroll', 'overtimePercentage', 'overtimeImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overtimeLoss = 0;\n      this.results.futureState.overtimeSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualPayroll = parseFloat(this.inputs.annualPayroll) || 0;\n    const overtimePercentage = parseFloat(this.inputs.overtimePercentage) / 100 || 0;\n    const overtimeImprovement = parseFloat(this.inputs.overtimeImprovement) / 100 || 0;\n\n    // 1. Calculate base overtime cost (Annual payroll × Overtime percentage)\n    const annualCost = annualPayroll * overtimePercentage;\n\n    // 2. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overtimeImprovement;\n\n    // Store results\n    this.results.currentState.overtimeLoss = annualCost;\n    this.results.futureState.overtimeSavings = savings;\n  }\n\n  async calculateOverScheduling() {\n    const requiredInputs = ['actualHours', 'budgetedHours', 'numberOfLocations', 'averageWage', 'overSchedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overSchedulingLoss = 0;\n      this.results.futureState.overSchedulingSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const actualHours = parseFloat(this.inputs.actualHours) || 0;\n    const budgetedHours = parseFloat(this.inputs.budgetedHours) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const overSchedulingImprovement = parseFloat(this.inputs.overSchedulingImprovement) / 100 || 0;\n\n    // 1. Calculate weekly excess hours per location (Actual hours - Budgeted hours per week)\n    const weeklyExcessHoursPerLocation = Math.max(0, actualHours - budgetedHours);\n\n    // 2. Calculate total weekly excess hours (Weekly excess hours × Number of locations)\n    const totalWeeklyExcessHours = weeklyExcessHoursPerLocation * numberOfLocations;\n\n    // 3. Calculate weekly cost (Total weekly excess hours × Average wage)\n    const weeklyCost = totalWeeklyExcessHours * averageWage;\n\n    // 4. Calculate annual cost (Weekly cost × 52 weeks)\n    const annualCost = weeklyCost * 52;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overSchedulingImprovement;\n\n    // Store results\n    this.results.currentState.overSchedulingLoss = annualCost;\n    this.results.futureState.overSchedulingSavings = savings;\n  }\n\n  async calculateProductivity() {\n    const requiredInputs = ['annualSalary', 'hoursPerLocation', 'numberOfLocations', 'schedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.productivityLoss = 0;\n      this.results.futureState.productivitySavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualSalary = parseFloat(this.inputs.annualSalary) || 0;\n    const hoursPerLocation = parseFloat(this.inputs.hoursPerLocation) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const productivityImprovement = parseFloat(this.inputs.schedulingImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened hourly rate (Annual salary × 1.3 ÷ 2080)\n    const fullyBurdenedHourlyRate = (annualSalary * 1.3) / 2080;\n\n    // 2. Calculate total weekly hours (Hours per location × Number of locations)\n    const totalWeeklyHours = hoursPerLocation * numberOfLocations;\n\n    // 3. Calculate annual cost (Total weekly hours × Hourly rate × 52 weeks)\n    const annualCost = totalWeeklyHours * fullyBurdenedHourlyRate * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * productivityImprovement;\n\n    // Store results\n    this.results.currentState.productivityLoss = annualCost;\n    this.results.futureState.productivitySavings = savings;\n  }\n\n  async calculateTurnover() {\n    const requiredInputs = ['numberOfEmployees', 'turnoverRate', 'turnoverImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.turnoverLoss = 0;\n      this.results.futureState.turnoverSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const turnoverRate = parseFloat(this.inputs.turnoverRate) / 100 || 0;\n    const turnoverImprovement = parseFloat(this.inputs.turnoverImprovement) / 100 || 0;\n    const costPerReplacement = 4700; // Fixed cost based on industry research\n\n    // 1. Calculate quarterly employee turnover (Total employees × Turnover rate)\n    const quarterlyTurnover = totalEmployees * turnoverRate;\n\n    // 2. Calculate annual turnover (Quarterly turnover × 4)\n    const annualTurnover = quarterlyTurnover * 4;\n\n    // 3. Calculate replacement cost (Annual turnover × Cost per replacement)\n    const annualCost = annualTurnover * costPerReplacement;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * turnoverImprovement;\n\n    // Store results\n    this.results.currentState.turnoverLoss = annualCost;\n    this.results.futureState.turnoverSavings = savings;\n  }\n\n  async calculateCallOuts() {\n    const requiredInputs = ['revenuePerHour', 'shiftDuration', 'calloutsPerWeek', 'numberOfLocations', 'calloutImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.callOutLoss = 0;\n      this.results.futureState.callOutSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const revenuePerHour = parseFloat(this.inputs.revenuePerHour) || 0;\n    const shiftDuration = parseFloat(this.inputs.shiftDuration) || 0;\n    const calloutsPerWeek = parseFloat(this.inputs.calloutsPerWeek) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const calloutImprovement = parseFloat(this.inputs.calloutImprovement) / 100 || 0;\n\n    // 1. Calculate revenue loss per shift (Revenue per hour × Shift duration)\n    const revenueLossPerShift = revenuePerHour * shiftDuration;\n\n    // 2. Calculate weekly loss per location (Revenue loss per shift × Call-outs per week)\n    const weeklyLossPerLocation = revenueLossPerShift * calloutsPerWeek;\n\n    // 3. Calculate annual loss (Weekly loss × Number of locations × 52 weeks)\n    const annualCost = weeklyLossPerLocation * numberOfLocations * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * calloutImprovement;\n\n    // Store results\n    this.results.currentState.callOutLoss = annualCost;\n    this.results.futureState.callOutSavings = savings;\n  }\n\n  async calculateMealRestCompliance() {\n    const requiredInputs = ['averageWage', 'numberOfEmployees'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.mealRestViolations = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const AFFECTED_EMPLOYEE_PERCENTAGE = 0.48; // 48% based on research\n\n    // 1. Calculate penalty per violation (Average wage × 2)\n    const penaltyPerViolation = averageWage * 2;\n\n    // 2. Calculate affected employees (Total employees × 48%)\n    const affectedEmployees = totalEmployees * AFFECTED_EMPLOYEE_PERCENTAGE;\n\n    // 3. Calculate annual risk (Penalty × Affected employees × 52 weeks)\n    const annualRisk = penaltyPerViolation * affectedEmployees * 52;\n\n    // Store results\n    this.results.complianceRisk.mealRestViolations = annualRisk;\n  }\n\n  async calculateFairWorkweekCompliance() {\n    // Required inputs based on the calculation steps\n    const requiredInputs = [\n      'averageEmployeesPerLocation',  // Average employees per location\n      'fairWorkweekLocations',        // Number of FWW locations\n      'daysOpenPerWeek'              // Days open per week\n    ];\n\n    // Validate required inputs\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.fairWorkweekViolations = 0;\n      return;\n    }\n\n    // Step 1: Calculate total affected employees\n    // (Average employees per location × Number of FWW locations)\n    const totalAffectedEmployees = \n      parseFloat(this.inputs.averageEmployeesPerLocation) * \n      parseFloat(this.inputs.fairWorkweekLocations);\n\n    // Step 2: Calculate annual days\n    // (Days open per week × 52 weeks)\n    const annualDays = parseFloat(this.inputs.daysOpenPerWeek) * 52;\n\n    // Step 3: Calculate low-end annual risk\n    // (Total employees × Annual days × $300)\n    const PENALTY_AMOUNT = 300;\n    const annualRisk = totalAffectedEmployees * annualDays * PENALTY_AMOUNT;\n\n    // Store the result\n    this.results.complianceRisk.fairWorkweekViolations = annualRisk;\n  }\n\n  // ... other calculation methods\n}\n\nexport default CalculatorService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}