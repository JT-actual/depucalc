{"ast":null,"code":"class CalculatorService{constructor(inputs){this.inputs=inputs;this.results={currentState:{timeTheftLoss:0,overtimeLoss:0,overSchedulingLoss:0,productivityLoss:0,turnoverLoss:0,callOutLoss:0,totalAnnualLoss:0},futureState:{timeTheftSavings:0,overtimeSavings:0,overSchedulingSavings:0,productivitySavings:0,turnoverSavings:0,callOutSavings:0,totalAnnualSavings:0},complianceRisk:{mealRestViolations:0,fairWorkweekViolations:0,totalComplianceRisk:0}};}async calculateAll(){// Individual calculations will be added here\nawait this.calculateTimeTheft();await this.calculateOvertime();await this.calculateOverScheduling();await this.calculateProductivity();await this.calculateTurnover();await this.calculateCallOuts();await this.calculateMealRestCompliance();await this.calculateFairWorkweekCompliance();// Calculate totals\nthis.calculateTotals();return this.results;}calculateTotals(){// Current state total\nthis.results.currentState.totalAnnualLoss=this.results.currentState.timeTheftLoss+this.results.currentState.overtimeLoss+this.results.currentState.overSchedulingLoss+this.results.currentState.productivityLoss+this.results.currentState.turnoverLoss+this.results.currentState.callOutLoss;// Future state total\nthis.results.futureState.totalAnnualSavings=this.results.futureState.timeTheftSavings+this.results.futureState.overtimeSavings+this.results.futureState.overSchedulingSavings+this.results.futureState.productivitySavings+this.results.futureState.turnoverSavings+this.results.futureState.callOutSavings;// Compliance risk total\nthis.results.complianceRisk.totalComplianceRisk=this.results.complianceRisk.mealRestViolations+this.results.complianceRisk.fairWorkweekViolations;}validateInputs(requiredInputs){return requiredInputs.every(input=>this.inputs.hasOwnProperty(input)&&this.inputs[input]!==null&&this.inputs[input]!==undefined&&this.inputs[input]!=='');}async calculateTimeTheft(){const requiredInputs=['averageWage','timeTheftMinutes','daysOpenPerWeek','numberOfEmployees','timeTheftImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.timeTheftLoss=0;this.results.futureState.timeTheftSavings=0;return;}// Get required inputs with fallbacks to 0\nconst averageWage=parseFloat(this.inputs.averageWage)||0;const timeTheftMinutes=parseFloat(this.inputs.timeTheftMinutes)||0;const daysOpenPerWeek=parseFloat(this.inputs.daysOpenPerWeek)||0;const numberOfEmployees=parseFloat(this.inputs.numberOfEmployees)||0;const timeTheftImprovement=parseFloat(this.inputs.timeTheftImprovement)/100||0;// 1. Calculate fully-burdened labor cost (Average wage × 1.3)\nconst fullyBurdenedRate=averageWage*1.3;// 2. Calculate cost per minute (Fully-burdened rate ÷ 60)\nconst costPerMinute=fullyBurdenedRate/60;// 3. Calculate annual time theft (Minutes per day × Days per week × 52 weeks × Number of employees)\nconst annualTimeTheftMinutes=timeTheftMinutes*daysOpenPerWeek*52*numberOfEmployees;// 4. Calculate annual cost (Total minutes × Cost per minute)\nconst annualCost=annualTimeTheftMinutes*costPerMinute;// 5. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*timeTheftImprovement;// Store results\nthis.results.currentState.timeTheftLoss=annualCost;this.results.futureState.timeTheftSavings=savings;}async calculateOvertime(){const requiredInputs=['annualPayroll','overtimePercentage','overtimeImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.overtimeLoss=0;this.results.futureState.overtimeSavings=0;return;}// Get required inputs with fallbacks to 0\nconst annualPayroll=parseFloat(this.inputs.annualPayroll)||0;const overtimePercentage=parseFloat(this.inputs.overtimePercentage)/100||0;const overtimeImprovement=parseFloat(this.inputs.overtimeImprovement)/100||0;// 1. Calculate base overtime cost (Annual payroll × Overtime percentage)\nconst annualCost=annualPayroll*overtimePercentage;// 2. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*overtimeImprovement;// Store results\nthis.results.currentState.overtimeLoss=annualCost;this.results.futureState.overtimeSavings=savings;}async calculateOverScheduling(){const requiredInputs=['actualHours','budgetedHours','numberOfLocations','averageWage','overSchedulingImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.overSchedulingLoss=0;this.results.futureState.overSchedulingSavings=0;return;}// Get required inputs with fallbacks to 0\nconst actualHours=parseFloat(this.inputs.actualHours)||0;const budgetedHours=parseFloat(this.inputs.budgetedHours)||0;const numberOfLocations=parseFloat(this.inputs.numberOfLocations)||0;const averageWage=parseFloat(this.inputs.averageWage)||0;const overSchedulingImprovement=parseFloat(this.inputs.overSchedulingImprovement)/100||0;// 1. Calculate weekly excess hours per location (Actual hours - Budgeted hours per week)\nconst weeklyExcessHoursPerLocation=Math.max(0,actualHours-budgetedHours);// 2. Calculate total weekly excess hours (Weekly excess hours × Number of locations)\nconst totalWeeklyExcessHours=weeklyExcessHoursPerLocation*numberOfLocations;// 3. Calculate weekly cost (Total weekly excess hours × Average wage)\nconst weeklyCost=totalWeeklyExcessHours*averageWage;// 4. Calculate annual cost (Weekly cost × 52 weeks)\nconst annualCost=weeklyCost*52;// 5. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*overSchedulingImprovement;// Store results\nthis.results.currentState.overSchedulingLoss=annualCost;this.results.futureState.overSchedulingSavings=savings;}async calculateProductivity(){const requiredInputs=['annualSalary','hoursPerLocation','numberOfLocations','schedulingImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.productivityLoss=0;this.results.futureState.productivitySavings=0;return;}// Get required inputs with fallbacks to 0\nconst annualSalary=parseFloat(this.inputs.annualSalary)||0;const hoursPerLocation=parseFloat(this.inputs.hoursPerLocation)||0;const numberOfLocations=parseFloat(this.inputs.numberOfLocations)||0;const productivityImprovement=parseFloat(this.inputs.schedulingImprovement)/100||0;// 1. Calculate fully-burdened hourly rate (Annual salary × 1.3 ÷ 2080)\nconst fullyBurdenedHourlyRate=annualSalary*1.3/2080;// 2. Calculate total weekly hours (Hours per location × Number of locations)\nconst totalWeeklyHours=hoursPerLocation*numberOfLocations;// 3. Calculate annual cost (Total weekly hours × Hourly rate × 52 weeks)\nconst annualCost=totalWeeklyHours*fullyBurdenedHourlyRate*52;// 4. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*productivityImprovement;// Store results\nthis.results.currentState.productivityLoss=annualCost;this.results.futureState.productivitySavings=savings;}async calculateTurnover(){const requiredInputs=['numberOfEmployees','turnoverRate','turnoverImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.turnoverLoss=0;this.results.futureState.turnoverSavings=0;return;}// Get required inputs with fallbacks to 0\nconst totalEmployees=parseFloat(this.inputs.numberOfEmployees)||0;const turnoverRate=parseFloat(this.inputs.turnoverRate)/100||0;const turnoverImprovement=parseFloat(this.inputs.turnoverImprovement)/100||0;const costPerReplacement=4700;// Fixed cost based on industry research\n// 1. Calculate quarterly employee turnover (Total employees × Turnover rate)\nconst quarterlyTurnover=totalEmployees*turnoverRate;// 2. Calculate annual turnover (Quarterly turnover × 4)\nconst annualTurnover=quarterlyTurnover*4;// 3. Calculate replacement cost (Annual turnover × Cost per replacement)\nconst annualCost=annualTurnover*costPerReplacement;// 4. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*turnoverImprovement;// Store results\nthis.results.currentState.turnoverLoss=annualCost;this.results.futureState.turnoverSavings=savings;}async calculateCallOuts(){const requiredInputs=['revenuePerHour','shiftDuration','calloutsPerWeek','numberOfLocations','calloutImprovement'];if(!this.validateInputs(requiredInputs)){this.results.currentState.callOutLoss=0;this.results.futureState.callOutSavings=0;return;}// Get required inputs with fallbacks to 0\nconst revenuePerHour=parseFloat(this.inputs.revenuePerHour)||0;const shiftDuration=parseFloat(this.inputs.shiftDuration)||0;const calloutsPerWeek=parseFloat(this.inputs.calloutsPerWeek)||0;const numberOfLocations=parseFloat(this.inputs.numberOfLocations)||0;const calloutImprovement=parseFloat(this.inputs.calloutImprovement)/100||0;// 1. Calculate revenue loss per shift (Revenue per hour × Shift duration)\nconst revenueLossPerShift=revenuePerHour*shiftDuration;// 2. Calculate weekly loss per location (Revenue loss per shift × Call-outs per week)\nconst weeklyLossPerLocation=revenueLossPerShift*calloutsPerWeek;// 3. Calculate annual loss (Weekly loss × Number of locations × 52 weeks)\nconst annualCost=weeklyLossPerLocation*numberOfLocations*52;// 4. Calculate savings with Deputy (Total cost × Improvement rate)\nconst savings=annualCost*calloutImprovement;// Store results\nthis.results.currentState.callOutLoss=annualCost;this.results.futureState.callOutSavings=savings;}async calculateMealRestCompliance(){const requiredInputs=['averageWage','numberOfEmployees'];if(!this.validateInputs(requiredInputs)){this.results.complianceRisk.mealRestViolations=0;return;}// Get required inputs with fallbacks to 0\nconst averageWage=parseFloat(this.inputs.averageWage)||0;const totalEmployees=parseFloat(this.inputs.numberOfEmployees)||0;const AFFECTED_EMPLOYEE_PERCENTAGE=0.48;// 48% based on research\n// 1. Calculate penalty per violation (Average wage × 2)\nconst penaltyPerViolation=averageWage*2;// 2. Calculate affected employees (Total employees × 48%)\nconst affectedEmployees=totalEmployees*AFFECTED_EMPLOYEE_PERCENTAGE;// 3. Calculate annual risk (Penalty × Affected employees × 52 weeks)\nconst annualRisk=penaltyPerViolation*affectedEmployees*52;// Store results\nthis.results.complianceRisk.mealRestViolations=annualRisk;}async calculateFairWorkweekCompliance(){// Required inputs based on the calculation steps\nconst requiredInputs=['averageEmployeesPerLocation',// Average employees per location\n'fairWorkweekLocations',// Number of FWW locations\n'daysOpenPerWeek'// Days open per week\n];// Validate required inputs\nif(!this.validateInputs(requiredInputs)){this.results.complianceRisk.fairWorkweekViolations=0;return;}// Step 1: Calculate total affected employees\n// (Average employees per location × Number of FWW locations)\nconst totalAffectedEmployees=parseFloat(this.inputs.averageEmployeesPerLocation)*parseFloat(this.inputs.fairWorkweekLocations);// Step 2: Calculate annual days\n// (Days open per week × 52 weeks)\nconst annualDays=parseFloat(this.inputs.daysOpenPerWeek)*52;// Step 3: Calculate low-end annual risk\n// (Total employees × Annual days × $300)\nconst PENALTY_AMOUNT=300;const annualRisk=totalAffectedEmployees*annualDays*PENALTY_AMOUNT;// Store the result\nthis.results.complianceRisk.fairWorkweekViolations=annualRisk;}// ... other calculation methods\n}export default CalculatorService;","map":{"version":3,"names":["CalculatorService","constructor","inputs","results","currentState","timeTheftLoss","overtimeLoss","overSchedulingLoss","productivityLoss","turnoverLoss","callOutLoss","totalAnnualLoss","futureState","timeTheftSavings","overtimeSavings","overSchedulingSavings","productivitySavings","turnoverSavings","callOutSavings","totalAnnualSavings","complianceRisk","mealRestViolations","fairWorkweekViolations","totalComplianceRisk","calculateAll","calculateTimeTheft","calculateOvertime","calculateOverScheduling","calculateProductivity","calculateTurnover","calculateCallOuts","calculateMealRestCompliance","calculateFairWorkweekCompliance","calculateTotals","validateInputs","requiredInputs","every","input","hasOwnProperty","undefined","averageWage","parseFloat","timeTheftMinutes","daysOpenPerWeek","numberOfEmployees","timeTheftImprovement","fullyBurdenedRate","costPerMinute","annualTimeTheftMinutes","annualCost","savings","annualPayroll","overtimePercentage","overtimeImprovement","actualHours","budgetedHours","numberOfLocations","overSchedulingImprovement","weeklyExcessHoursPerLocation","Math","max","totalWeeklyExcessHours","weeklyCost","annualSalary","hoursPerLocation","productivityImprovement","schedulingImprovement","fullyBurdenedHourlyRate","totalWeeklyHours","totalEmployees","turnoverRate","turnoverImprovement","costPerReplacement","quarterlyTurnover","annualTurnover","revenuePerHour","shiftDuration","calloutsPerWeek","calloutImprovement","revenueLossPerShift","weeklyLossPerLocation","AFFECTED_EMPLOYEE_PERCENTAGE","penaltyPerViolation","affectedEmployees","annualRisk","totalAffectedEmployees","averageEmployeesPerLocation","fairWorkweekLocations","annualDays","PENALTY_AMOUNT"],"sources":["/Users/joshuathomas/Desktop/Code/depulator final/src/services/calculatorService.js"],"sourcesContent":["class CalculatorService {\n  constructor(inputs) {\n    this.inputs = inputs;\n    this.results = {\n      currentState: {\n        timeTheftLoss: 0,\n        overtimeLoss: 0,\n        overSchedulingLoss: 0,\n        productivityLoss: 0,\n        turnoverLoss: 0,\n        callOutLoss: 0,\n        totalAnnualLoss: 0,\n      },\n      futureState: {\n        timeTheftSavings: 0,\n        overtimeSavings: 0,\n        overSchedulingSavings: 0,\n        productivitySavings: 0,\n        turnoverSavings: 0,\n        callOutSavings: 0,\n        totalAnnualSavings: 0,\n      },\n      complianceRisk: {\n        mealRestViolations: 0,\n        fairWorkweekViolations: 0,\n        totalComplianceRisk: 0,\n      }\n    };\n  }\n\n  async calculateAll() {\n    // Individual calculations will be added here\n    await this.calculateTimeTheft();\n    await this.calculateOvertime();\n    await this.calculateOverScheduling();\n    await this.calculateProductivity();\n    await this.calculateTurnover();\n    await this.calculateCallOuts();\n    await this.calculateMealRestCompliance();\n    await this.calculateFairWorkweekCompliance();\n    \n    // Calculate totals\n    this.calculateTotals();\n    \n    return this.results;\n  }\n\n  calculateTotals() {\n    // Current state total\n    this.results.currentState.totalAnnualLoss = \n      this.results.currentState.timeTheftLoss +\n      this.results.currentState.overtimeLoss +\n      this.results.currentState.overSchedulingLoss +\n      this.results.currentState.productivityLoss +\n      this.results.currentState.turnoverLoss +\n      this.results.currentState.callOutLoss;\n\n    // Future state total\n    this.results.futureState.totalAnnualSavings = \n      this.results.futureState.timeTheftSavings +\n      this.results.futureState.overtimeSavings +\n      this.results.futureState.overSchedulingSavings +\n      this.results.futureState.productivitySavings +\n      this.results.futureState.turnoverSavings +\n      this.results.futureState.callOutSavings;\n\n    // Compliance risk total\n    this.results.complianceRisk.totalComplianceRisk =\n      this.results.complianceRisk.mealRestViolations +\n      this.results.complianceRisk.fairWorkweekViolations;\n  }\n\n  validateInputs(requiredInputs) {\n    return requiredInputs.every(input => \n      this.inputs.hasOwnProperty(input) && \n      this.inputs[input] !== null && \n      this.inputs[input] !== undefined && \n      this.inputs[input] !== ''\n    );\n  }\n\n  async calculateTimeTheft() {\n    const requiredInputs = ['averageWage', 'timeTheftMinutes', 'daysOpenPerWeek', 'numberOfEmployees', 'timeTheftImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.timeTheftLoss = 0;\n      this.results.futureState.timeTheftSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const timeTheftMinutes = parseFloat(this.inputs.timeTheftMinutes) || 0;\n    const daysOpenPerWeek = parseFloat(this.inputs.daysOpenPerWeek) || 0;\n    const numberOfEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const timeTheftImprovement = parseFloat(this.inputs.timeTheftImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened labor cost (Average wage × 1.3)\n    const fullyBurdenedRate = averageWage * 1.3;\n\n    // 2. Calculate cost per minute (Fully-burdened rate ÷ 60)\n    const costPerMinute = fullyBurdenedRate / 60;\n\n    // 3. Calculate annual time theft (Minutes per day × Days per week × 52 weeks × Number of employees)\n    const annualTimeTheftMinutes = timeTheftMinutes * daysOpenPerWeek * 52 * numberOfEmployees;\n\n    // 4. Calculate annual cost (Total minutes × Cost per minute)\n    const annualCost = annualTimeTheftMinutes * costPerMinute;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * timeTheftImprovement;\n\n    // Store results\n    this.results.currentState.timeTheftLoss = annualCost;\n    this.results.futureState.timeTheftSavings = savings;\n  }\n\n  async calculateOvertime() {\n    const requiredInputs = ['annualPayroll', 'overtimePercentage', 'overtimeImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overtimeLoss = 0;\n      this.results.futureState.overtimeSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualPayroll = parseFloat(this.inputs.annualPayroll) || 0;\n    const overtimePercentage = parseFloat(this.inputs.overtimePercentage) / 100 || 0;\n    const overtimeImprovement = parseFloat(this.inputs.overtimeImprovement) / 100 || 0;\n\n    // 1. Calculate base overtime cost (Annual payroll × Overtime percentage)\n    const annualCost = annualPayroll * overtimePercentage;\n\n    // 2. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overtimeImprovement;\n\n    // Store results\n    this.results.currentState.overtimeLoss = annualCost;\n    this.results.futureState.overtimeSavings = savings;\n  }\n\n  async calculateOverScheduling() {\n    const requiredInputs = ['actualHours', 'budgetedHours', 'numberOfLocations', 'averageWage', 'overSchedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.overSchedulingLoss = 0;\n      this.results.futureState.overSchedulingSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const actualHours = parseFloat(this.inputs.actualHours) || 0;\n    const budgetedHours = parseFloat(this.inputs.budgetedHours) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const overSchedulingImprovement = parseFloat(this.inputs.overSchedulingImprovement) / 100 || 0;\n\n    // 1. Calculate weekly excess hours per location (Actual hours - Budgeted hours per week)\n    const weeklyExcessHoursPerLocation = Math.max(0, actualHours - budgetedHours);\n\n    // 2. Calculate total weekly excess hours (Weekly excess hours × Number of locations)\n    const totalWeeklyExcessHours = weeklyExcessHoursPerLocation * numberOfLocations;\n\n    // 3. Calculate weekly cost (Total weekly excess hours × Average wage)\n    const weeklyCost = totalWeeklyExcessHours * averageWage;\n\n    // 4. Calculate annual cost (Weekly cost × 52 weeks)\n    const annualCost = weeklyCost * 52;\n\n    // 5. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * overSchedulingImprovement;\n\n    // Store results\n    this.results.currentState.overSchedulingLoss = annualCost;\n    this.results.futureState.overSchedulingSavings = savings;\n  }\n\n  async calculateProductivity() {\n    const requiredInputs = ['annualSalary', 'hoursPerLocation', 'numberOfLocations', 'schedulingImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.productivityLoss = 0;\n      this.results.futureState.productivitySavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const annualSalary = parseFloat(this.inputs.annualSalary) || 0;\n    const hoursPerLocation = parseFloat(this.inputs.hoursPerLocation) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const productivityImprovement = parseFloat(this.inputs.schedulingImprovement) / 100 || 0;\n\n    // 1. Calculate fully-burdened hourly rate (Annual salary × 1.3 ÷ 2080)\n    const fullyBurdenedHourlyRate = (annualSalary * 1.3) / 2080;\n\n    // 2. Calculate total weekly hours (Hours per location × Number of locations)\n    const totalWeeklyHours = hoursPerLocation * numberOfLocations;\n\n    // 3. Calculate annual cost (Total weekly hours × Hourly rate × 52 weeks)\n    const annualCost = totalWeeklyHours * fullyBurdenedHourlyRate * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * productivityImprovement;\n\n    // Store results\n    this.results.currentState.productivityLoss = annualCost;\n    this.results.futureState.productivitySavings = savings;\n  }\n\n  async calculateTurnover() {\n    const requiredInputs = ['numberOfEmployees', 'turnoverRate', 'turnoverImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.turnoverLoss = 0;\n      this.results.futureState.turnoverSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const turnoverRate = parseFloat(this.inputs.turnoverRate) / 100 || 0;\n    const turnoverImprovement = parseFloat(this.inputs.turnoverImprovement) / 100 || 0;\n    const costPerReplacement = 4700; // Fixed cost based on industry research\n\n    // 1. Calculate quarterly employee turnover (Total employees × Turnover rate)\n    const quarterlyTurnover = totalEmployees * turnoverRate;\n\n    // 2. Calculate annual turnover (Quarterly turnover × 4)\n    const annualTurnover = quarterlyTurnover * 4;\n\n    // 3. Calculate replacement cost (Annual turnover × Cost per replacement)\n    const annualCost = annualTurnover * costPerReplacement;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * turnoverImprovement;\n\n    // Store results\n    this.results.currentState.turnoverLoss = annualCost;\n    this.results.futureState.turnoverSavings = savings;\n  }\n\n  async calculateCallOuts() {\n    const requiredInputs = ['revenuePerHour', 'shiftDuration', 'calloutsPerWeek', 'numberOfLocations', 'calloutImprovement'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.currentState.callOutLoss = 0;\n      this.results.futureState.callOutSavings = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const revenuePerHour = parseFloat(this.inputs.revenuePerHour) || 0;\n    const shiftDuration = parseFloat(this.inputs.shiftDuration) || 0;\n    const calloutsPerWeek = parseFloat(this.inputs.calloutsPerWeek) || 0;\n    const numberOfLocations = parseFloat(this.inputs.numberOfLocations) || 0;\n    const calloutImprovement = parseFloat(this.inputs.calloutImprovement) / 100 || 0;\n\n    // 1. Calculate revenue loss per shift (Revenue per hour × Shift duration)\n    const revenueLossPerShift = revenuePerHour * shiftDuration;\n\n    // 2. Calculate weekly loss per location (Revenue loss per shift × Call-outs per week)\n    const weeklyLossPerLocation = revenueLossPerShift * calloutsPerWeek;\n\n    // 3. Calculate annual loss (Weekly loss × Number of locations × 52 weeks)\n    const annualCost = weeklyLossPerLocation * numberOfLocations * 52;\n\n    // 4. Calculate savings with Deputy (Total cost × Improvement rate)\n    const savings = annualCost * calloutImprovement;\n\n    // Store results\n    this.results.currentState.callOutLoss = annualCost;\n    this.results.futureState.callOutSavings = savings;\n  }\n\n  async calculateMealRestCompliance() {\n    const requiredInputs = ['averageWage', 'numberOfEmployees'];\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.mealRestViolations = 0;\n      return;\n    }\n    // Get required inputs with fallbacks to 0\n    const averageWage = parseFloat(this.inputs.averageWage) || 0;\n    const totalEmployees = parseFloat(this.inputs.numberOfEmployees) || 0;\n    const AFFECTED_EMPLOYEE_PERCENTAGE = 0.48; // 48% based on research\n\n    // 1. Calculate penalty per violation (Average wage × 2)\n    const penaltyPerViolation = averageWage * 2;\n\n    // 2. Calculate affected employees (Total employees × 48%)\n    const affectedEmployees = totalEmployees * AFFECTED_EMPLOYEE_PERCENTAGE;\n\n    // 3. Calculate annual risk (Penalty × Affected employees × 52 weeks)\n    const annualRisk = penaltyPerViolation * affectedEmployees * 52;\n\n    // Store results\n    this.results.complianceRisk.mealRestViolations = annualRisk;\n  }\n\n  async calculateFairWorkweekCompliance() {\n    // Required inputs based on the calculation steps\n    const requiredInputs = [\n      'averageEmployeesPerLocation',  // Average employees per location\n      'fairWorkweekLocations',        // Number of FWW locations\n      'daysOpenPerWeek'              // Days open per week\n    ];\n\n    // Validate required inputs\n    if (!this.validateInputs(requiredInputs)) {\n      this.results.complianceRisk.fairWorkweekViolations = 0;\n      return;\n    }\n\n    // Step 1: Calculate total affected employees\n    // (Average employees per location × Number of FWW locations)\n    const totalAffectedEmployees = \n      parseFloat(this.inputs.averageEmployeesPerLocation) * \n      parseFloat(this.inputs.fairWorkweekLocations);\n\n    // Step 2: Calculate annual days\n    // (Days open per week × 52 weeks)\n    const annualDays = parseFloat(this.inputs.daysOpenPerWeek) * 52;\n\n    // Step 3: Calculate low-end annual risk\n    // (Total employees × Annual days × $300)\n    const PENALTY_AMOUNT = 300;\n    const annualRisk = totalAffectedEmployees * annualDays * PENALTY_AMOUNT;\n\n    // Store the result\n    this.results.complianceRisk.fairWorkweekViolations = annualRisk;\n  }\n\n  // ... other calculation methods\n}\n\nexport default CalculatorService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}